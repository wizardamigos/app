'use strict'
/****************************************************************************
  STACK
****************************************************************************/
const WINDOW  = require("global/window")
const minixhr = require('minixhr')
const stream  = require('readable-stream')
const defined = require('defined')
/******************************************************************************
  CUSTOM
******************************************************************************/
const NO_ERROR    = null
const NO_ENDPOINT = new Error('no endpoint given')
const NO_CLIENTID = new Error('no clientID given')
const NO_RIGHTS   = new Error('no right requests given')

var settings  = {  // DIGITAL OCEAN BACKEND
  endpoint        : 'https://wizardamigos.herokuapp.com/github_auths/access_token',
  clientID        : '5b82f229a2e11f61f58b',
  rights          : ['gist']
}
var HELP = '@TODO: describe module api usage'
var AUTH = {
  status  : undefined,
  id      : undefined,
  token   : undefined
}
var FREE_LESSONS = 4
var authInProgress
/******************************************************************************
  HELPER - receive github token guard
******************************************************************************/
var selforigin = '*'
// var selforigin = 'http://0.0.0.0:8000'
var EXIT = WINDOW.parent || WINDOW
try {
  if (EXIT.opener) {
    var code = EXIT.location.search.split('=')[1]
    if (code) {
      EXIT.opener.postMessage({ type: 'auth', value: code }, selforigin)
      EXIT.close()
    }
  }
} catch (e) {
  debugger
}

/******************************************************************************
  MAIN
******************************************************************************/
module.exports = GithubAuth

    // var HELP = '@TODO: describe module api usage'
    // var AUTH = {
    //   status  : undefined,
    //   id      : undefined,
    //   token   : undefined
    // }
function GithubAuth (db, opts, cb) {
  opts = opts||{}
  cb = cb || opts
  db.get('esova-credentials', function (error, oldCreds) {
    try {oldCreds=JSON.parse(oldCreds)}catch(e){oldCreds=defined(oldCreds,{})}
    if (!oldCreds.id || !oldCreds.token) error = oldCreds
    if (error) {
      db.get('esova-currentLesson', function (error, lastlesson) {
        if (+lastlesson <= FREE_LESSONS && !opts.force)
          db.put('esova-credentials',JSON.stringify({status:'not ready'}))
        else getCredentials(settings, function start (err, newCreds) {
          (AUTH = (newCreds||{})).status = err ? err.message : 'clear'
          // @TODO: add auto de/en coding, so the manual stringify/parse goes away
          db.put('esova-credentials', JSON.stringify(AUTH), function (e) {
            if (cb) e ? cb(e, HELP) : cb(null, HELP)
          })
        })
      })

    } else {
      (AUTH = oldCreds).status = 'clear'
      // @TODO: add auto de/en coding, so the manual stringify/parse goes away
      db.put('esova-credentials', JSON.stringify(AUTH), function (e) {
        if (cb) e ? cb(e, HELP) : cb(null, HELP)
      })
    }
  })
  function getCredentials (x, start) {
    if (!x.endpoint) { return start(NO_ENDPOINT) }
    if (!x.clientID) { return start(NO_CLIENTID) }
    if (!x.rights)   { return start(NO_RIGHTS)   }
    window.addEventListener("message", sendCode)
    function sendCode (event) {
      var msg = event.data
      if (msg.type === 'auth') {
        var code = msg.value
        if (!authInProgress) {
          authInProgress = setTimeout(function () {
            authInProgress = false
            if (code)
              db.get('esova-promocode', function (error, promocode) {
                var params = '?code='+code+(promocode?'&promocode='+promocode:'')
                minixhr(x.endpoint+params, function (data, _, __, header) {
                  // data = {
                  //   validPromo: false/true,
                  //   token: null/<token>,
                  //   id: null/<id>
                  // }
                  try {
                    data = JSON.parse(data)
                    if (data.validPromo) {
                      var token = data.token && data.token.length ? data.token:null
                      if (token && token.length < 100) {
                        var url = 'https://api.github.com/user?access_token='+token
                        minixhr(url, function (ghdata, _, __, header) {
                          ghdata = JSON.parse(ghdata)
                          var credentials = {
                            id: data.id,
                            token: token,
                            username: ghdata.login,
                            name: ghdata.name,
                            createdAt: data.createdAt,
                            avatar: ghdata.avatar_url
                          }
                          start(null, credentials)
                        })
                      }
                      else start(new Error('no valid token'))
                    } else start(new Error('no valid promocode'))
                  }
                  catch (e) { start(e) }
                })
              })
            else start(new Error('couldnt get "auth code" from github'))
          },0)
        }
      }
    }
    var host    = 'http://github.com/login/oauth/authorize?'
    var params  = 'client_id='+x.clientID+'&scope='+x.rights.join('%2C')
    WINDOW.open(host + params, '_blank')
  }
}
